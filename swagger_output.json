{
  "openapi": "3.0.3",
  "info": {
    "title": "Food Delivery API",
    "description": "Implementation of Backend Development for a Food Delivery App \n- [Setup Guide  ](https://github.com/vishalmishraa/food-delivery/blob/master/README.md)\n\n- [Github Repository  ](https://github.com/vishalmishraa/food-delivery)\n\n- [Contact Developer](https://www.linkedin.com/in/vishal022/)",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://lobster-app-rabce.ondigitalocean.app/api",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3000/api",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "costs",
      "description": "Calculate the Food delivery cost"
    },
    {
      "name": "organizations",
      "description": "Add new organization or get all organization"
    },
    {
      "name": "item",
      "description": "Create and get All items"
    },
    {
      "name": "pricing",
      "description": "Create new pricing and get All pricing"
    }
  ],
  "paths": {
    "/calculateCost": {
      "post": {
        "tags": [
          "costs"
        ],
        "summary": "Calculate cost of food delivery",
        "description": "",
        "operationId": "CalculateCost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBody/CalculateCost"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responseBody/ApiResponseCalculateCost"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/newOrganization": {
      "post": {
        "tags": [
          "organizations"
        ],
        "summary": "Add a new item",
        "description": "",
        "operationId": "newOrganization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBody/newOrganization"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization Added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responseBody/apiResponseNewOrganization"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/getAllOrganization": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Find all the Organizations",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responseBody/apiResponseGetAllOrganization"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error"
          }
        }
      }
    },
    "/addItem": {
      "post": {
        "tags": [
          "item"
        ],
        "summary": "Add a new item",
        "description": "",
        "operationId": "AddNewItem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBody/addItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responseBody/apiResponseAddItem"
                }
              }
            }

          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/getAllItems": {
      "get": {
        "tags": [
          "item"
        ],
        "summary": "Find all the Items",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responseBody/apiResponseGetAllItem"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error"
          }
        }
      }
    },
    "/addPricing": {
      "post": {
        "tags": [
          "pricing"
        ],
        "summary": "Add new pricing",
        "description": "",
        "operationId": "NewPricing",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBody/addPricing"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responseBody/apiResponseAddPricing"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/getAllPricing": {
      "get": {
        "tags": [
          "pricing"
        ],
        "summary": "Find all the Pricings",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responseBody/apiResponseGetAllPricing"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error"
          }
        }
      }
    }
    
  },
  "components": {
    "schemas": {
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "description": "Organization name",
            "example": "chocoBakery"
          }
        }
      },
      "Item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "item_type": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "perishable",
              "non-perishable"
            ]
          },
          "description": {
            "type": "string",
            "example": "cake"
          },
          "organization_id": {
            "$ref": "#/components/schemas/Organization"
          }
        }
      },
      "Pricing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "organization_id": {
            "$ref": "#/components/schemas/Organization"
          },
          "item_id": {
            "$ref": "#/components/schemas/Item"
          },
          "zone": {
            "type": "string",
            "example": "central"
          },
          "base_distance_in_km": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "km_price": {
            "type": "number",
            "format": "double",
            "example": 1
          },
          "fix_price": {
            "type": "number",
            "format": "double",
            "example": 1
          }
        }
      }
    },
    "requestBody":{
      "CalculateCost":{
        "type": "object",
        "properties": {
          "zone": {
            "type": "string",
            "example": "central"
          },
          "organization_id": {
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "item_type": {
            "type": "string",
            "description": "type of item",
            "enum": [
              "perishable",
              "non-perishable"
            ]
          },
          "item_description": {
            "type": "string",
            "example": "cake"
          },
          "total_distance": {
            "type": "integer",
            "format": "int64",
            "example": 12
          }
        } 
      },
      "addItem":{
        "type": "object",
        "properties": {
          "organization_id": {
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "description": {
            "type": "string",
            "example": "cake"
          },
          "type": {
            "type": "string",
            "description": "type of item",
            "enum": [
              "perishable",
              "non-perishable"
            ]
          }
        }
      },
      "addPricing":{
        "type": "object",
        "properties": {
          "organization_id": {
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "item_id": {
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "zone": {
            "type": "string",
            "example": "central"
          },
          "base_distance_in_km": {
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "km_price": {
            "type": "number",
            "format": "double",
            "example": 1.5
          },
          "fix_price": {
            "type": "number",
            "format": "double",
            "example": 10
          }
        }
      },
      "newOrganization":{
        "type": "object",
        "properties": {
          "organization_name": {
            "type": "string",
            "example": "chocoBakery"
          }
        }
      }
    },
    "responseBody":{
      "ApiResponseCalculateCost":{
        "type":"object",
        "properties":{
          "success": {
            "type": "string",
            "example": "success"
          },
          "total_price":{
            "type": "number",
            "format": "double",
            "example": 20.5
          }
        }
      },
      "apiResponseNewOrganization":{
        "type":"object",
        "properties":{
          "success": {
            "type": "string",
            "example": "success"
          },
          "message":{
            "type": "string",
            "example": "Organization Added"
          }
        }
      },
      "apiResponseGetAllOrganization":{
        "type":"object",
        "properties":{
          "success": {
            "type": "string",
            "example": "success"
          },
          "data":{
            "type": "array",
            "items":{
              "$ref": "#/components/schemas/Organization"
            }
          }
        }
      },
      "apiResponseAddItem":{
        "type":"object",
        "properties":{
          "success": {
            "type": "string",
            "example": "success"
          },
          "message":{
            "type": "string",
            "example": "Item added successfully"
          }
        }
      }, 
      "apiResponseAddPricing":{
        "type":"object",
        "properties":{
          "success": {
            "type": "string",
            "example": "success"
          },
          "message":{
            "type": "string",
            "example": "Pricing structure Added successfully"
          }
        }
      },
      "apiResponseGetAllItem":{
        "type":"object",
        "properties":{
          "success": {
            "type": "string",
            "example": "success"
          },
          "data":{
            "type": "array",
            "items":{
              "$ref": "#/components/schemas/Item"
            }
          }
        }
      },
      "apiResponseArrayGetAllPricing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "organization_id": {
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "item_id": {
            "type": "integer",
            "format": "int64",
            "example": 8
          },
          "zone": {
            "type": "string",
            "example": "central"
          },
          "base_distance_in_km": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "km_price": {
            "type": "number",
            "format": "double",
            "example": 1
          },
          "fix_price": {
            "type": "number",
            "format": "double",
            "example": 1
          }
        }
      },
      "apiResponseGetAllPricing": {
        "type": "object",
        "defaultModelsExpandDepth":-1,
        "properties": {
          "success": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/responseBody/apiResponseArrayGetAllPricing"
            }
          }
        }
      }
    } 
  }
}